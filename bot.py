import logging
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from datetime import datetime, timedelta

API_TOKEN = "7641718670:AAHSV9B00v4vx3FGaiC01BvdfPyHyPm0YX0"
ADMIN_ID = 1303484682  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º SQLite
conn = sqlite3.connect("subscriptions.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS subscriptions (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    end_date TEXT
)
""")
conn.commit()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MSG = (
    "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!\n\n"
    "üîê –ó–¥–µ—Å—å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –ø—Ä–æ–≥–Ω–æ–∑–∞–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ.\n"
    "–ï—Å–ª–∏ —É –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π.\n\n"
    "–ï—Å–ª–∏ –≤—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @intonusmd –¥–ª—è –æ–ø–ª–∞—Ç—ã."
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def admin_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "‚ûï –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
    return kb

def user_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
    return kb

# –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user(user: types.User):
    cursor.execute("SELECT user_id FROM subscriptions WHERE user_id = ?", (user.id,))
    if not cursor.fetchone():
        username = f"@{user.username}" if user.username else None
        cursor.execute(
            "INSERT INTO subscriptions (user_id, username, end_date) VALUES (?, ?, ?)",
            (user.id, username, "1970-01-01T00:00:00")
        )
        conn.commit()

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (—Ä–∞–∑ –≤ —á–∞—Å)
async def clean_expired():
    while True:
        now = datetime.now().isoformat()
        cursor.execute("DELETE FROM subscriptions WHERE end_date < ?", (now,))
        conn.commit()
        await asyncio.sleep(3600)

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID)
async def admin_handler(message: types.Message):
    if message.text == "/start":
        await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_kb())
        return

    if message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        cursor.execute("SELECT COUNT(*) FROM subscriptions")
        total = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM subscriptions WHERE end_date > ?", (datetime.now().isoformat(),))
        active = cursor.fetchone()[0]
        await message.answer(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active}", reply_markup=admin_kb())

    elif message.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞":
        await message.answer("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.", reply_markup=admin_kb())

    elif message.text == "‚ûï –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `@username 30` ‚Äî –¥–ª—è –≤—ã–¥–∞—á–∏ –Ω–∞ 30 –¥–Ω–µ–π.", reply_markup=admin_kb())

    elif message.text.startswith("@"):
        try:
            username, days = message.text.strip().split()
            days = int(days)
            cursor.execute("SELECT user_id FROM subscriptions WHERE username = ?", (username,))
            row = cursor.fetchone()
            if not row:
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_kb())
                return
            user_id = row[0]
            end_date = datetime.now() + timedelta(days=days)
            cursor.execute("UPDATE subscriptions SET end_date = ? WHERE user_id = ?", (end_date.isoformat(), user_id))
            conn.commit()
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} –Ω–∞ {days} –¥–Ω–µ–π.", reply_markup=admin_kb())
            try:
                await bot.send_message(user_id, f"üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
            except:
                await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=admin_kb())

    else:
        # –†–∞—Å—Å—ã–ª–∫–∞
        cursor.execute("SELECT user_id, end_date FROM subscriptions")
        rows = cursor.fetchall()
        sent = 0
        for uid, end_date in rows:
            try:
                if datetime.fromisoformat(end_date) > datetime.now():
                    await bot.send_message(uid, message.text)
                    sent += 1
            except:
                continue
        await message.answer(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=admin_kb())

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(lambda m: m.from_user.id != ADMIN_ID)
async def user_handler(message: types.Message):
    add_user(message.from_user)
    user_id = message.from_user.id
    if message.text == "/start":
        await message.answer(WELCOME_MSG, reply_markup=user_kb())
    elif message.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        cursor.execute("SELECT end_date FROM subscriptions WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        if result:
            end_date = datetime.fromisoformat(result[0])
            now = datetime.now()
            if end_date > now:
                delta = end_date - now
                days = delta.days
                hours = delta.seconds // 3600
                await message.answer(
                    f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.\n–û—Å—Ç–∞–ª–æ—Å—å: {days} –¥–Ω–µ–π –∏ {hours} —á–∞—Å–æ–≤.",
                    reply_markup=user_kb()
                )
            else:
                await message.answer("üîí –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @intonusmd –¥–ª—è –æ–ø–ª–∞—Ç—ã.", reply_markup=user_kb())
        else:
            await message.answer("üîí –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @intonusmd –¥–ª—è –æ–ø–ª–∞—Ç—ã.", reply_markup=user_kb())
    else:
        await message.answer(WELCOME_MSG, reply_markup=user_kb())

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    loop = asyncio.get_event_loop()
    loop.create_task(clean_expired())
    try:
        executor.start_polling(dp, skip_updates=True)
    finally:
        conn.close()
