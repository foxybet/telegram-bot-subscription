import logging
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from datetime import datetime, timedelta

API_TOKEN = "7641718670:AAHSV9B00v4vx3FGaiC01BvdfPyHyPm0YX0"  # –¢–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 1303484682  # –¢–≤–æ–π Telegram ID

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
conn = sqlite3.connect("subscriptions.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS subscriptions (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    end_date TEXT
)
""")
conn.commit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def is_subscribed(user_id):
    cursor.execute("SELECT end_date FROM subscriptions WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        return False
    end_date = datetime.fromisoformat(result[0])
    return datetime.now() < end_date

# –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
async def clean_expired():
    while True:
        now = datetime.now().isoformat()
        cursor.execute("DELETE FROM subscriptions WHERE end_date < ?", (now,))
        conn.commit()
        await asyncio.sleep(3600)

# –ö–Ω–æ–ø–æ—á–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(
            KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            KeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞"),
            KeyboardButton("‚ûï –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
        )
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=kb)
    else:
        if is_subscribed(message.from_user.id):
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ ‚úÖ")
        else:
            await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @intonusmd –¥–ª—è –æ–ø–ª–∞—Ç—ã.")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats(message: types.Message):
    cursor.execute("SELECT COUNT(*) FROM subscriptions")
    total = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM subscriptions WHERE end_date > ?", (datetime.now().isoformat(),))
    active = cursor.fetchone()[0]
    await message.answer(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active}")

# –†–∞—Å—Å—ã–ª–∫–∞
broadcast_wait = {}

@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def prompt_broadcast(message: types.Message):
    broadcast_wait[message.from_user.id] = True
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")

# –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚Äî –∑–∞–ø—Ä–æ—Å username
@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text == "‚ûï –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def ask_username(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∏–Ω–∞—è —Å @) –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π. –ü—Ä–∏–º–µ—Ä:\n`@username 30`", parse_mode="Markdown")

# –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∏–ª–∏ –≤—ã–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID)
async def handle_admin_text(message: types.Message):
    text = message.text.strip()

    # –†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏
    if broadcast_wait.get(message.from_user.id):
        cursor.execute("SELECT user_id, end_date FROM subscriptions")
        users = cursor.fetchall()
        count = 0
        for user_id, end_date in users:
            if datetime.now() < datetime.fromisoformat(end_date):
                try:
                    await bot.send_message(user_id, text)
                    count += 1
                except:
                    pass
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        broadcast_wait[message.from_user.id] = False
        return

    # –í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ username
    if text.startswith("@") and len(text.split()) == 2:
        username, days_str = text.split()
        try:
            days = int(days_str)
            user = await bot.get_chat(username)
            end_date = datetime.now() + timedelta(days=days)
            cursor.execute(
                "REPLACE INTO subscriptions (user_id, username, end_date) VALUES (?, ?, ?)",
                (user.id, username, end_date.isoformat())
            )
            conn.commit()
            await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} –≤—ã–¥–∞–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π.")
            await bot.send_message(user.id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ username –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π. –ü—Ä–∏–º–µ—Ä:\n`@username 30`", parse_mode="Markdown")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    loop = asyncio.get_event_loop()
    loop.create_task(clean_expired())
    executor.start_polling(dp, skip_updates=True)
