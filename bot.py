import logging
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from datetime import datetime, timedelta

API_TOKEN = "7641718670:AAHSV9B00v4vx3FGaiC01BvdfPyHyPm0YX0"
ADMIN_ID = 1303484682

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

conn = sqlite3.connect("subscriptions.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS subscriptions (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    end_date TEXT
)
""")
conn.commit()

def add_user(user: types.User):
    user_id = user.id
    username = f"@{user.username}" if user.username else None
    cursor.execute("SELECT user_id FROM subscriptions WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO subscriptions (user_id, username, end_date) VALUES (?, ?, ?)",
            (user_id, username, "1970-01-01T00:00:00")
        )
        conn.commit()

def get_subscription_remaining_days(user_id):
    cursor.execute("SELECT end_date FROM subscriptions WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        return 0
    end_date = datetime.fromisoformat(result[0])
    remaining = (end_date - datetime.now()).days
    return remaining if remaining > 0 else 0

def is_subscribed(user_id):
    return get_subscription_remaining_days(user_id) > 0

async def clean_expired():
    while True:
        now = datetime.now().isoformat()
        cursor.execute("DELETE FROM subscriptions WHERE end_date < ?", (now,))
        conn.commit()
        await asyncio.sleep(3600)

@dp.message_handler()
async def handle_all_messages(message: types.Message):
    add_user(message.from_user)

    user_id = message.from_user.id

    kb_admin = ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        KeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞"),
        KeyboardButton("‚ûï –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
    )

    kb_user = ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
    )

    if user_id == ADMIN_ID:
        # –ê–¥–º–∏–Ω–∫–∞
        if message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            cursor.execute("SELECT COUNT(*) FROM subscriptions")
            total = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM subscriptions WHERE end_date > ?", (datetime.now().isoformat(),))
            active = cursor.fetchone()[0]
            await message.answer(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active}", reply_markup=kb_admin)

        elif message.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞":
            await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π).", reply_markup=kb_admin)

        elif message.text == "‚ûï –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @) –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ü—Ä–∏–º–µ—Ä:\n@username 30", reply_markup=kb_admin)

        elif message.text and message.text.startswith("@"):
            try:
                parts = message.text.strip().split()
                if len(parts) != 2:
                    await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–Ω–µ–π", reply_markup=kb_admin)
                    return
                username = parts[0]
                days = int(parts[1])

                cursor.execute("SELECT user_id FROM subscriptions WHERE username = ?", (username,))
                res = cursor.fetchone()
                if not res:
                    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_admin)
                    return

                user_id_to_sub = res[0]
                end_date = datetime.now() + timedelta(days=days)
                cursor.execute("REPLACE INTO subscriptions (user_id, username, end_date) VALUES (?, ?, ?)",
                               (user_id_to_sub, username, end_date.isoformat()))
                conn.commit()
                await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} –Ω–∞ {days} –¥–Ω–µ–π.", reply_markup=kb_admin)
                try:
                    await bot.send_message(user_id_to_sub, f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
                except:
                    pass
            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=kb_admin)

        else:
            # –†–∞—Å—Å—ã–ª–∫–∞
            text = message.text.strip()
            cursor.execute("SELECT user_id, end_date FROM subscriptions")
            users = cursor.fetchall()
            count = 0
            for uid, end_date in users:
                if datetime.now() < datetime.fromisoformat(end_date):
                    try:
                        await bot.send_message(uid, text)
                        count += 1
                    except:
                        pass
            await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=kb_admin)

    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —á–∞—Å—Ç—å
        if message.text == "/start":
            if is_subscribed(user_id):
                await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!\n–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ ‚úÖ", reply_markup=kb_user)
            else:
                welcome_message = (
                    "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n"
                    "–í—ã –ø–æ–ø–∞–ª–∏ –≤ –±–æ—Ç–∞ —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π.\n"
                    "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º ‚Äî –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
                    "üí° *–ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞—ë—Ç:*\n"
                    "- –ü—Ä–æ–≥–Ω–æ–∑—ã –æ—Ç –æ–ø—ã—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ üéØ\n"
                    "- –≠–∫—Å–ø—Ä–µ—Å—Å—ã —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º 5+\n"
                    "- –õ–∏—á–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ —Å—Ç–∞–≤–∫–∞–º üí¨\n"
                    "- –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ —Å–ø–∞–º–∞\n\n"
                    "üîí –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                    "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º üëâ @intonusmd"
                )
                await message.answer(welcome_message, parse_mode="Markdown", reply_markup=kb_user)

        elif message.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
            days_left = get_subscription_remaining_days(user_id)
            if days_left > 0:
                await message.answer(f"‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â—ë {days_left} –¥–Ω–µ–π.", reply_markup=kb_user)
            else:
                await message.answer("üîí –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=kb_user)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    loop = asyncio.get_event_loop()
    loop.create_task(clean_expired())
    executor.start_polling(dp, skip_updates=True)
