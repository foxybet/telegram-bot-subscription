import logging
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from datetime import datetime, timedelta

API_TOKEN = "7641718670:AAHSV9B00v4vx3FGaiC01BvdfPyHyPm0YX0"
ADMIN_ID = 1303484682

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("subscriptions.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS subscriptions (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    end_date TEXT
)
""")
conn.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
def add_user(user: types.User):
    user_id = user.id
    username = f"@{user.username}" if user.username else None
    cursor.execute("SELECT user_id FROM subscriptions WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO subscriptions (user_id, username, end_date) VALUES (?, ?, ?)",
            (user_id, username, "1970-01-01T00:00:00")
        )
        conn.commit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def is_subscribed(user_id):
    cursor.execute("SELECT end_date FROM subscriptions WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        return False
    end_date = datetime.fromisoformat(result[0])
    return datetime.now() < end_date

# –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å
def get_remaining_days(user_id):
    cursor.execute("SELECT end_date FROM subscriptions WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        return 0
    end_date = datetime.fromisoformat(result[0])
    remaining = (end_date - datetime.now()).days
    return max(remaining, 0)

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
async def clean_expired():
    while True:
        try:
            conn_local = sqlite3.connect("subscriptions.db")
            cursor_local = conn_local.cursor()
            now = datetime.now().isoformat()
            cursor_local.execute("DELETE FROM subscriptions WHERE end_date < ?", (now,))
            conn_local.commit()
            conn_local.close()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        await asyncio.sleep(3600)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_all_messages(message: types.Message):
    user = message.from_user
    user_id = user.id
    add_user(user)

    if user_id == ADMIN_ID:
        # –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(
            KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            KeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞"),
            KeyboardButton("‚ûï –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
        )

        if message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            cursor.execute("SELECT COUNT(*) FROM subscriptions")
            total = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM subscriptions WHERE end_date > ?", (datetime.now().isoformat(),))
            active = cursor.fetchone()[0]
            await message.answer(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active}", reply_markup=kb)

        elif message.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞":
            await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.", reply_markup=kb)

        elif message.text == "‚ûï –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n@username 30", reply_markup=kb)

        elif message.text.startswith("@"):
            try:
                parts = message.text.strip().split()
                if len(parts) != 2:
                    await message.answer("–§–æ—Ä–º–∞—Ç: @username 30", reply_markup=kb)
                    return
                username = parts[0]
                days = int(parts[1])
                cursor.execute("SELECT user_id FROM subscriptions WHERE username = ?", (username,))
                result = cursor.fetchone()
                if not result:
                    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb)
                    return
                uid = result[0]
                end_date = datetime.now() + timedelta(days=days)
                cursor.execute("REPLACE INTO subscriptions (user_id, username, end_date) VALUES (?, ?, ?)",
                               (uid, username, end_date.isoformat()))
                conn.commit()
                await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} –Ω–∞ {days} –¥–Ω–µ–π.", reply_markup=kb)
                try:
                    await bot.send_message(uid, f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π!")
                except:
                    pass
            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=kb)

        else:
            # –†–∞—Å—Å—ã–ª–∫–∞
            cursor.execute("SELECT user_id, end_date FROM subscriptions")
            all_users = cursor.fetchall()
            count = 0
            for uid, end in all_users:
                if datetime.now() < datetime.fromisoformat(end):
                    try:
                        await bot.send_message(uid, message.text)
                        count += 1
                    except:
                        pass
            await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=kb)

    else:
        # –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton("‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞"))

        if message.text == "/start":
            if is_subscribed(user_id):
                await message.answer("‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.", reply_markup=kb)
            else:
                await message.answer("üîí –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @–≤–∞—à–Ω–∏–∫–Ω–µ–π–º.", reply_markup=kb)

        elif message.text == "‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞":
            if is_subscribed(user_id):
                days = get_remaining_days(user_id)
                await message.answer(f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=kb)
            else:
                await message.answer("üîí –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @–≤–∞—à–Ω–∏–∫–Ω–µ–π–º.", reply_markup=kb)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    loop = asyncio.get_event_loop()
    loop.create_task(clean_expired())
    executor.start_polling(dp, skip_updates=True)
